{"ast":null,"code":"import { configureStore } from '@reduxjs/toolkit';\nimport createSagaMiddleware from 'redux-saga';\nimport { rootReducer } from './reducers/rootReducer';\nimport initState from './initState';\nimport rootSaga from './sagas/rootSags';\nconst sagaMiddleware = createSagaMiddleware();\nconst store = configureStore({\n  reducer: rootReducer,\n  preloadedState: initState,\n  middleware: getDefaultMiddleware => getDefaultMiddleware().concat(sagaMiddleware),\n  devTools: process.env.NODE_ENV !== 'production'\n});\nsagaMiddleware.run(rootSaga);\nexport default store;","map":{"version":3,"names":["configureStore","createSagaMiddleware","rootReducer","initState","rootSaga","sagaMiddleware","store","reducer","preloadedState","middleware","getDefaultMiddleware","concat","devTools","process","env","NODE_ENV","run"],"sources":["/Users/danil/Desktop/work/work/client/src/components/redux/store.js"],"sourcesContent":["import { configureStore } from '@reduxjs/toolkit';\nimport createSagaMiddleware from 'redux-saga';\n\nimport { rootReducer } from './reducers/rootReducer';\nimport initState from './initState';\nimport rootSaga from './sagas/rootSags';\n\nconst sagaMiddleware = createSagaMiddleware();\n\nconst store = configureStore({\n  reducer: rootReducer,\n  preloadedState: initState,\n  middleware: (getDefaultMiddleware) =>\n    getDefaultMiddleware().concat(sagaMiddleware),\n  devTools: process.env.NODE_ENV !== 'production',\n});\n\nsagaMiddleware.run(rootSaga);\n\nexport default store;\n"],"mappings":"AAAA,SAASA,cAAc,QAAQ,kBAAkB;AACjD,OAAOC,oBAAoB,MAAM,YAAY;AAE7C,SAASC,WAAW,QAAQ,wBAAwB;AACpD,OAAOC,SAAS,MAAM,aAAa;AACnC,OAAOC,QAAQ,MAAM,kBAAkB;AAEvC,MAAMC,cAAc,GAAGJ,oBAAoB,CAAC,CAAC;AAE7C,MAAMK,KAAK,GAAGN,cAAc,CAAC;EAC3BO,OAAO,EAAEL,WAAW;EACpBM,cAAc,EAAEL,SAAS;EACzBM,UAAU,EAAGC,oBAAoB,IAC/BA,oBAAoB,CAAC,CAAC,CAACC,MAAM,CAACN,cAAc,CAAC;EAC/CO,QAAQ,EAAEC,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK;AACrC,CAAC,CAAC;AAEFV,cAAc,CAACW,GAAG,CAACZ,QAAQ,CAAC;AAE5B,eAAeE,KAAK","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}